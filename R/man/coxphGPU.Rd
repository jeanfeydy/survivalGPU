% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coxphGPU.R
\name{coxphGPU}
\alias{coxphGPU}
\alias{summary.coxphGPU}
\title{Fast Cox Proportional Hazards Regression Model}
\usage{
coxphGPU(formula, data, ties = c("efron", "breslow"), bootstrap = 1,
         batchsize = 0, init, all.results = FALSE, control,
         singular.ok = TRUE, model = FALSE, x = FALSE, y = TRUE, ...)

\method{summary}{coxphGPU}(object, ..., conf.int = 0,95, scale = 1)
}
\arguments{
\item{formula}{a formula object, with the response on the left of a ~
operator, and the terms on the right. The response must be a survival
object as returned by the \code{survival::Surv} function. For the moment,
\code{coxphGPU()} only manages the counting type for \code{Surv} object, i.e. two
\code{time} argument in the function (Surv(time = start, time2 = stop, event)
for example)}

\item{data}{a data.frame in which to interpret the variables named in the
formula.}

\item{ties}{a character string specifying the method for tie handling. If
there are no tied death times all the methods are equivalent. Nearly all
Cox regression programs use the Breslow method by default, but not this
one. The Efron approximation is used as the default here, it is more
accurate when dealing with tied death times, and is as efficient
computationally.}

\item{bootstrap}{Number of repeats for the bootstrap cross-validation.}

\item{batchsize}{Number of bootstrap copies that should be handled at a time.
Defaults to 0, which means that we handle all copies at once. If you run
into out of memory errors, please consider using batchsize=100, 10 or 1.}

\item{init}{Vector of initial values of the iteration. Default initial value
is zero for all variables.}

\item{all.results}{Post-processing calculations. If TRUE, coxphGPU returns
linears.predictors, wald.test, concordance for all bootstraps. Default to
FALSE if bootstrap.}

\item{control}{Object of class coxph.control specifying iteration limit
(iter.max argument) and other control options. Default is coxph.control(...).}

\item{singular.ok}{logical value indicating how to handle collinearity in the
model matrix. If TRUE, the program will automatically skip over columns of
the X matrix that are linear combinations of earlier columns. In this case
the coefficients for such columns will be NA, and the variance matrix will
contain zeros. For ancillary calculations, such as the linear predictor,
the missing coefficients are treated as zeros.}

\item{model}{logical value: if TRUE, the model frame is returned in component
model.}

\item{x}{logical value: if TRUE, the x matrix is returned in component x.}

\item{y}{logical value: if TRUE, the response vector is returned in component
y.}

\item{...}{additional argument(s) for methods.}

\item{object}{a coxphGPU object}

\item{conf.int}{level for computation of the confidence intervals.}

\item{scale}{vector of scale factors for the coefficients, defaults to 1. The
printed coefficients, se, and confidence intervals will be associated with
one scale unit.}
}
\value{
A coxphGPU object representing the fit.

With \code{summary()} :
\itemize{
\item \code{conf.int}:                  a matrix with one row for each coefficient,
containing the confidence limits for exp(coef).
\item \code{conf.int_bootstrap}:        confidence limits for exp(coef) determined by
bootstrap
\item \verb{logtest, sctest, waldtest}: the overall likelihood ratio, score, and Wald
test statistics for the model
\item \code{concordance}:               the concordance statistic and its standard
error
\item \code{rsq}:                       an approximate R^2 based on Nagelkirke
(Biometrika 1991).
}
}
\description{
Fits a Cox proportional hazards regression model. An extension
to use (or not) your GPU to speed up calculations, in particular for
bootstrap.

Use \code{summary()} method to see confidence interval for covariates with two
process : normal distribution and bootstrap (if \code{bootstrap > 1}).
}
\examples{
\dontrun{
library(survival)
library(WCE)
data(drugdata)

## Check CUDA drivers (if FALSE you use CPU)
use_cuda()

## Cox Proportional Hazards without bootstrap
coxphGPU(Surv(Start, Stop, Event) ~ sex + age,
         data = drugdata,
         bootstrap = 1)

## Cox Proportional Hazards with bootstrap

if (use_cuda()) {
  n_bootstrap <- 1000
  batchsize <- 200
} else {
  n_bootstrap <- 50
  batchsize <- 10
}

coxph_bootstrap <- coxphGPU(Surv(Start, Stop, Event) ~ sex + age,
                            data = drugdata,
                            bootstrap = n_bootstrap,
                            batchsize = batchsize)

summary(coxph_bootstrap)
}
}
\references{
Therneau T (2021). \emph{A Package for Survival Analysis in R}. R
package version 3.2-13
}
